{"version":3,"sources":["template-manager.min.js"],"names":["scope","name","definition","module","exports","define","amd","template_manager","$","jQuery","cache","fetchers","fetchCache","id","fetchElement","each","trim","this","text","fetchNetwork","url","ajax","type","dataType","async","success","data","get","template","methods","length","pop"],"mappings":";;;;;;;CAeC,SAAUA,GACP,cAQC,SAAUC,EAAMC,GACS,gBAAXC,SAAkC,OAAXA,QAAmBA,OAAOC,QACxDD,OAAOC,QAAUA,QAAUF,IACF,kBAAXG,SAAyBA,OAAOC,IAC9CD,OAAOH,GAEPF,EAAMC,GAAQC,KAEpB,mBAAoB,WAClB,GACIK,GADAC,EAAIR,EAAMS,OAEVC,KACAC,GACIC,WAAY,SAAUC,GAClB,MAAOH,GAAMG,IAAO,MAExBC,aAAc,SAAUD,GAOpB,MANAL,GAAE,QAAUK,EAAK,YAAYE,KAAK,WAG9B,MAFAR,GAAiBG,MAAMG,EAAIL,EAAEQ,KAAKR,EAAES,MAAMC,UAEnC,IAGJP,EAASC,WAAWC,IAE/BM,aAAc,SAAUC,GAWpB,MAVAZ,GAAEa,MACEC,KAAM,MACNF,IAAKA,EACLG,SAAU,OACVC,OAAO,EACPC,QAAS,SAAUC,GACfnB,EAAiBG,MAAMU,EAAKM,MAI7Bf,EAASC,WAAWQ,IAsCvC,OAlCAb,IAQIoB,IAAK,SAAUd,GAQX,IAPA,GAAIe,GAAW,KACXC,GACI,eACA,eACA,cAGY,OAAbD,GAAqBC,EAAQC,QAChCF,EAAWjB,EAASkB,EAAQE,OAAOlB,EAGvC,OAAOe,IASXlB,MAAO,SAAUG,EAAIe,GACjBlB,EAAMG,GAAMe,OAM1BX","file":"template-manager.min.js","sourcesContent":["/*jslint */\n/*global module: true, exports: true, define: false */\n\n/**\n * @file template-manager.js A simple manager for loading and caching templates\n * @version 1.0.4\n * @copyright Jim Auldridge <auldridgej@gmail.com> 2016\n * @license MIT\n * @see {@link https://github.com/JAAulde/template-manager|GitHub Repository}\n */\n\n/**\n * Scope isolator\n * @param object scope A reference to the call scope\n */\n(function (scope) {\n    'use strict';\n\n    /**\n     * IIFE for injecting module into whichever require/scope is in use\n     *\n     * @param string name The name of module being created\n     * @param function definition Function which produces and returns the created module\n     */\n    (function (name, definition) {\n        if (typeof module === 'object' && module !== null && module.exports) {\n            module.exports = exports = definition();\n        } else if (typeof define === 'function' && define.amd) {\n            define(definition);\n        } else {\n            scope[name] = definition();\n        }\n    }('template_manager', function () {\n        var $ = scope.jQuery,\n            template_manager,\n            cache = {},\n            fetchers = {\n                fetchCache: function (id) {\n                    return cache[id] || null;\n                },\n                fetchElement: function (id) {\n                    $('[id=\"' + id + '\"]:first').each(function () {\n                        template_manager.cache(id, $.trim($(this).text()));\n\n                        return false;\n                    });\n\n                    return fetchers.fetchCache(id);\n                },\n                fetchNetwork: function (url) {\n                    $.ajax({\n                        type: 'GET',\n                        url: url,\n                        dataType: 'html',\n                        async: false,\n                        success: function (data) {\n                            template_manager.cache(url, data);\n                        }\n                    });\n\n                    return fetchers.fetchCache(url);\n                }\n            };\n\n        template_manager = {\n            /**\n             * Get a template from the Cache, DOM, or server\n             *\n             * @param  string id the ID or URL of the template\n             *\n             * @return string the tempalate\n             */\n            get: function (id) {\n                var template = null,\n                    methods = [\n                        'fetchNetwork',\n                        'fetchElement',\n                        'fetchCache'\n                    ];\n\n                while (template === null && methods.length) {\n                    template = fetchers[methods.pop()](id);\n                }\n\n                return template;\n            },\n            /**\n             * Inject a template string into the cache by name\n             *\n             * @param  string id The ID you'll use when you want to get the\n             *                   template from the manager\n             * @param  string template The template to cache\n             */\n            cache: function (id, template) {\n                cache[id] = template;\n            }\n        };\n\n        return template_manager;\n    }));\n}(this));"],"sourceRoot":"/source/"}